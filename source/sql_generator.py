from datetime import datetime 

class SQLGenerator():

    '''
    This class generates the SQL instructions from the CSV file header fields and data
    '''
    
    def __init__(self):
        pass


    def create_sql_table(self, table_name, columns, db_name='', dropIt=True):

        '''This function generates the SQL instruction to create the data table structure

        :param table_name: The name of the SQL table
        :param columns: the list of the table columns' names and types
        :param db_name: The name of the database
        :param dropIt: A flag which indicates if a DROP IF EXISTS instruction should be generated
        :raises: :Exception:`MISSING_DATA`: We could not create the SQL query of the table structure due to missing data (table or/and columns names)

        :returns: The query to create the data table
        :rtype: String
        ''' 
        
        if(table_name == '' or columns == []):
            raise Exception('MISSING_DATA', 'We could not create the SQL query of the table structure due to missing data (table or/and columns names).')

        query = ''
        if(db_name != ''):
            query = 'USE `{}`;\n\n'.format(db_name)
    
        if(dropIt):
            query += 'DROP TABLE IF EXISTS `{}`;\n\n'.format(table_name)

        table_str = 'CREATE TABLE IF NOT EXISTS `{}` \n(`id` INT NOT NULL AUTO_INCREMENT,\n'.format(table_name)

        query += table_str

        for column in columns:
            if column[1] == 'int':
                dtype = 'INT'
            elif column[1] == 'double':
                dtype = 'DOUBLE'
            elif column[1] == 'string':
                dtype = 'VARCHAR(255)'

            sql_col = '`{}` {} NOT NULL,\n'.format(column[0], dtype)
            query += sql_col

        query += 'PRIMARY KEY (`id`));'
    
        return query


    def insert_data(self, tablename, columns, data):

        '''This function generates the SQL instruction to insert the CSV data into the SQL data table

        :param table_name: The name of the SQL table
        :param columns: the list of the table columns' names and types
        :param data: The data extracted from the CSV file

        :returns: The query to create the data table
        :rtype: String
        ''' 

        query = 'INSERT INTO `{}` ('.format(tablename)

        i = 0
        cols = len(columns)
        while (i < cols):
            if i != cols - 1:
                query += '`{}`, '.format(columns[i][0])
            else:
                query += '`{}`) VALUES\n'.format(columns[i][0])
            i += 1

        rows = len(data)
        i = 0
        while (i < rows):
            row = data[i]
            j = 1
            k = 0
            insert = "("
            while (j < 2 * cols):
                if j != 2 * cols - 1:
                    if(columns[k][1] == 'string' or columns[k][1] == 'datetime'):
                        insert += '"{}", '.format(row[j])
                    else:
                        insert += '{}, '.format(row[j])
                else:
                    if(columns[k][1] == 'string' or columns[k][1] == 'datetime'):
                        insert += '"{}")'.format(row[j])
                    else:
                        insert += '{})'.format(row[j])
                    
                j += 2
                k += 1

            if i != rows - 1:
                query += insert + ",\n"
            else:
                query += insert + ";"
            i += 1

        return query 


    def save_sql_file(self, filename, table_structure_query, insert_query):

        '''This function writes the generated SQL queries into the output SQL file

        :param filename: The name of the output SQL file (the name is appended with the '.sql' extension)
        :param table_structure_query: The query generating the SQL table structure
        :param insert_query: The query generating the INSERT INTO instructions
        :raises: :Exception:`IOError`: I/O error

        :returns: code (0: success, 1: error / exception)
        :rtype: int
        ''' 

        try:
            with open(filename + ".sql", "w") as outfile:
                outfile.write('-- Generated by PySQLizer on {}\n'.format(datetime.now().strftime("%Y/%m/%d %H:%M:%S")))
                outfile.write('-- Project reporistory: https://github.com/slafi/PySQLizer\n')
                outfile.write('-- Author: S. Lafi\n')
                outfile.write('\n\n-- -------------------------------------------------------\n')
                outfile.write('--\t These instructions build the table structure   \n')
                outfile.write('-- -------------------------------------------------------\n')
                outfile.write(table_structure_query)
                outfile.write('\n\n\n-- ---------------------------------------------------------------\n')
                outfile.write('--\t This instruction inserts the data in the created table             \n')
                outfile.write('-- ---------------------------------------------------------------\n')
                outfile.write(insert_query)
            
            return 0
        except IOError as ex:
            print('Exception: {}'.format(str(ex)))
            return 1



    